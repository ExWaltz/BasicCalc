
/**
 *
 * @author minec
 */
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.HashMap;
import javax.swing.JOptionPane;

public class Calc extends javax.swing.JFrame {

    /**
     * Creates new form Calc
     */
    public Calc() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        calcPanel = new javax.swing.JPanel();
        resultPanel = new javax.swing.JPanel();
        result = new javax.swing.JTextField();
        historyButton = new javax.swing.JButton();
        lastEquation = new javax.swing.JLabel();
        buttonPanel = new javax.swing.JPanel();
        clearAll = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        not = new javax.swing.JButton();
        bitwise = new javax.swing.JButton();
        openParentesis = new javax.swing.JButton();
        closeParentesis = new javax.swing.JButton();
        percent = new javax.swing.JButton();
        divide = new javax.swing.JButton();
        minMin = new javax.swing.JButton();
        assignMul = new javax.swing.JButton();
        and = new javax.swing.JButton();
        or = new javax.swing.JButton();
        seven = new javax.swing.JButton();
        eight = new javax.swing.JButton();
        nine = new javax.swing.JButton();
        multiply = new javax.swing.JButton();
        addAdd = new javax.swing.JButton();
        assignMin = new javax.swing.JButton();
        equalsComparison = new javax.swing.JButton();
        notEquals = new javax.swing.JButton();
        four = new javax.swing.JButton();
        five = new javax.swing.JButton();
        six = new javax.swing.JButton();
        minus = new javax.swing.JButton();
        assignDiv = new javax.swing.JButton();
        assignAdd = new javax.swing.JButton();
        greaterEquals = new javax.swing.JButton();
        greaterThan = new javax.swing.JButton();
        one = new javax.swing.JButton();
        two = new javax.swing.JButton();
        three = new javax.swing.JButton();
        plus = new javax.swing.JButton();
        assignMod = new javax.swing.JButton();
        assignment = new javax.swing.JButton();
        lessEquals = new javax.swing.JButton();
        lessThan = new javax.swing.JButton();
        decimal = new javax.swing.JButton();
        zero = new javax.swing.JButton();
        negation = new javax.swing.JButton();
        equals = new javax.swing.JButton();
        historyPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        historyList = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Calculator By Group 1");
        setBackground(backgroundColor);
        setMinimumSize(new java.awt.Dimension(400, 330));
        setPreferredSize(new java.awt.Dimension(500, 630));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        calcPanel.setBackground(backgroundColor);
        calcPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        calcPanel.setLayout(new java.awt.GridLayout(2, 1));

        resultPanel.setBackground(getBackground());
        resultPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        result.setBackground(backgroundColor);
        result.setFont(new java.awt.Font("Montserrat", 1, 48)); // NOI18N
        result.setForeground(textColor);
        result.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        result.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        result.setCaretColor(new java.awt.Color(0, 255, 153));
        result.setDisabledTextColor(new java.awt.Color(204, 204, 204));
        result.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                resultKeyPressed(evt);
            }
        });

        historyButton.setBackground(backgroundColor);
        historyButton.setFont(new java.awt.Font("Montserrat", 1, 12)); // NOI18N
        historyButton.setForeground(textColor);
        historyButton.setText("History");
        historyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                historyAction(evt);
            }
        });

        lastEquation.setFont(new java.awt.Font("Montserrat", 0, 14)); // NOI18N
        lastEquation.setForeground(new java.awt.Color(204, 204, 204));
        lastEquation.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lastEquation.setText(" ");

        javax.swing.GroupLayout resultPanelLayout = new javax.swing.GroupLayout(resultPanel);
        resultPanel.setLayout(resultPanelLayout);
        resultPanelLayout.setHorizontalGroup(
            resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(result)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, resultPanelLayout.createSequentialGroup()
                .addContainerGap(547, Short.MAX_VALUE)
                .addComponent(historyButton)
                .addContainerGap())
            .addComponent(lastEquation, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        resultPanelLayout.setVerticalGroup(
            resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, resultPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(historyButton)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lastEquation)
                .addGap(0, 0, 0)
                .addComponent(result, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        calcPanel.add(resultPanel);

        buttonPanel.setBackground(getBackground());
        buttonPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        buttonPanel.setLayout(new java.awt.GridLayout(5, 8, 1, 1));

        clearAll.setBackground(clearColor);
        clearAll.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        clearAll.setForeground(textColor);
        clearAll.setText("CA");
        clearAll.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        clearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAllActionPerformed(evt);
            }
        });
        buttonPanel.add(clearAll);

        delete.setBackground(clearColor);
        delete.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        delete.setForeground(textColor);
        delete.setText("Del");
        delete.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });
        delete.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                resultKeyPressed(evt);
            }
        });
        buttonPanel.add(delete);

        not.setBackground(operatorColor);
        not.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        not.setForeground(textColor);
        not.setText("!(");
        not.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        not.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });
        buttonPanel.add(not);

        bitwise.setBackground(operatorColor);
        bitwise.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        bitwise.setForeground(textColor);
        bitwise.setText("^");
        bitwise.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        bitwise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });
        buttonPanel.add(bitwise);

        openParentesis.setBackground(operatorColor);
        openParentesis.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        openParentesis.setForeground(textColor);
        openParentesis.setText("(");
        openParentesis.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        openParentesis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });
        buttonPanel.add(openParentesis);

        closeParentesis.setBackground(operatorColor);
        closeParentesis.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        closeParentesis.setForeground(textColor);
        closeParentesis.setText(")");
        closeParentesis.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        closeParentesis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });
        buttonPanel.add(closeParentesis);

        percent.setBackground(operatorColor);
        percent.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        percent.setForeground(textColor);
        percent.setText("%");
        percent.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        percent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });
        buttonPanel.add(percent);

        divide.setBackground(operatorColor);
        divide.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        divide.setForeground(textColor);
        divide.setText("/");
        divide.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        divide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });
        buttonPanel.add(divide);

        minMin.setBackground(operatorColor);
        minMin.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        minMin.setForeground(textColor);
        minMin.setText("--");
        minMin.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        minMin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });
        buttonPanel.add(minMin);

        assignMul.setBackground(operatorColor);
        assignMul.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        assignMul.setForeground(textColor);
        assignMul.setText("*=");
        assignMul.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        assignMul.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });
        buttonPanel.add(assignMul);

        and.setBackground(operatorColor);
        and.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        and.setForeground(textColor);
        and.setText("&&");
        and.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        and.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });
        buttonPanel.add(and);

        or.setBackground(operatorColor);
        or.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        or.setForeground(textColor);
        or.setText("||");
        or.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        or.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });
        buttonPanel.add(or);

        seven.setBackground(numColor);
        seven.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        seven.setForeground(textColor);
        seven.setText("7");
        seven.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        seven.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });
        buttonPanel.add(seven);

        eight.setBackground(numColor);
        eight.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        eight.setForeground(textColor);
        eight.setText("8");
        eight.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        eight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });
        buttonPanel.add(eight);

        nine.setBackground(numColor);
        nine.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        nine.setForeground(textColor);
        nine.setText("9");
        nine.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        nine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });
        buttonPanel.add(nine);

        multiply.setBackground(operatorColor);
        multiply.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        multiply.setForeground(textColor);
        multiply.setText("*");
        multiply.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        multiply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });
        buttonPanel.add(multiply);

        addAdd.setBackground(operatorColor);
        addAdd.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        addAdd.setForeground(textColor);
        addAdd.setText("++");
        addAdd.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        addAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });
        buttonPanel.add(addAdd);

        assignMin.setBackground(operatorColor);
        assignMin.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        assignMin.setForeground(textColor);
        assignMin.setText("-=");
        assignMin.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        assignMin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });
        buttonPanel.add(assignMin);

        equalsComparison.setBackground(operatorColor);
        equalsComparison.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        equalsComparison.setForeground(textColor);
        equalsComparison.setText("==");
        equalsComparison.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        equalsComparison.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });
        buttonPanel.add(equalsComparison);

        notEquals.setBackground(operatorColor);
        notEquals.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        notEquals.setForeground(textColor);
        notEquals.setText("!=");
        notEquals.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        notEquals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });
        buttonPanel.add(notEquals);

        four.setBackground(numColor);
        four.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        four.setForeground(textColor);
        four.setText("4");
        four.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        four.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });
        buttonPanel.add(four);

        five.setBackground(numColor);
        five.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        five.setForeground(textColor);
        five.setText("5");
        five.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        five.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });
        buttonPanel.add(five);

        six.setBackground(numColor);
        six.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        six.setForeground(textColor);
        six.setText("6");
        six.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        six.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });
        buttonPanel.add(six);

        minus.setBackground(operatorColor);
        minus.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        minus.setForeground(textColor);
        minus.setText("-");
        minus.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        minus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });
        buttonPanel.add(minus);

        assignDiv.setBackground(operatorColor);
        assignDiv.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        assignDiv.setForeground(textColor);
        assignDiv.setText("/=");
        assignDiv.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        assignDiv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });
        buttonPanel.add(assignDiv);

        assignAdd.setBackground(operatorColor);
        assignAdd.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        assignAdd.setForeground(textColor);
        assignAdd.setText("+=");
        assignAdd.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        assignAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });
        buttonPanel.add(assignAdd);

        greaterEquals.setBackground(operatorColor);
        greaterEquals.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        greaterEquals.setForeground(textColor);
        greaterEquals.setText(">=");
        greaterEquals.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        greaterEquals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });
        buttonPanel.add(greaterEquals);

        greaterThan.setBackground(operatorColor);
        greaterThan.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        greaterThan.setForeground(textColor);
        greaterThan.setText(">");
        greaterThan.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        greaterThan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });
        buttonPanel.add(greaterThan);

        one.setBackground(numColor);
        one.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        one.setForeground(textColor);
        one.setText("1");
        one.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        one.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });
        buttonPanel.add(one);

        two.setBackground(numColor);
        two.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        two.setForeground(textColor);
        two.setText("2");
        two.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        two.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });
        buttonPanel.add(two);

        three.setBackground(numColor);
        three.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        three.setForeground(textColor);
        three.setText("3");
        three.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        three.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });
        buttonPanel.add(three);

        plus.setBackground(operatorColor);
        plus.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        plus.setForeground(textColor);
        plus.setText("+");
        plus.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        plus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });
        buttonPanel.add(plus);

        assignMod.setBackground(operatorColor);
        assignMod.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        assignMod.setForeground(textColor);
        assignMod.setText("%=");
        assignMod.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        assignMod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });
        buttonPanel.add(assignMod);

        assignment.setBackground(operatorColor);
        assignment.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        assignment.setForeground(textColor);
        assignment.setText("=");
        assignment.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        assignment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });
        buttonPanel.add(assignment);

        lessEquals.setBackground(operatorColor);
        lessEquals.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        lessEquals.setForeground(textColor);
        lessEquals.setText("<=");
        lessEquals.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        lessEquals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });
        buttonPanel.add(lessEquals);

        lessThan.setBackground(operatorColor);
        lessThan.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        lessThan.setForeground(textColor);
        lessThan.setText("<");
        lessThan.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        lessThan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });
        buttonPanel.add(lessThan);

        decimal.setBackground(numColor);
        decimal.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        decimal.setForeground(textColor);
        decimal.setText(".");
        decimal.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        decimal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });
        buttonPanel.add(decimal);

        zero.setBackground(numColor);
        zero.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        zero.setForeground(textColor);
        zero.setText("0");
        zero.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        zero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAction(evt);
            }
        });
        buttonPanel.add(zero);

        negation.setBackground(numColor);
        negation.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        negation.setForeground(textColor);
        negation.setText("(-)");
        negation.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        negation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                negationAction(evt);
            }
        });
        buttonPanel.add(negation);

        equals.setBackground(equalColor);
        equals.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        equals.setForeground(textColor);
        equals.setText("=");
        equals.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        equals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                equalsActionPerformed(evt);
            }
        });
        buttonPanel.add(equals);

        calcPanel.add(buttonPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.weightx = 0.7;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(calcPanel, gridBagConstraints);

        historyPanel.setBackground(backgroundColor);

        jScrollPane1.setBackground(backgroundColor);
        jScrollPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jScrollPane1.setForeground(textColor);
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        historyList.setEditable(false);
        historyList.setBackground(backgroundColor);
        historyList.setColumns(20);
        historyList.setFont(new java.awt.Font("Montserrat", 0, 14)); // NOI18N
        historyList.setForeground(textColor);
        historyList.setLineWrap(true);
        historyList.setRows(5);
        historyList.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        historyList.setDisabledTextColor(backgroundColor);
        jScrollPane1.setViewportView(historyList);

        javax.swing.GroupLayout historyPanelLayout = new javax.swing.GroupLayout(historyPanel);
        historyPanel.setLayout(historyPanelLayout);
        historyPanelLayout.setHorizontalGroup(
            historyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(historyPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        historyPanelLayout.setVerticalGroup(
            historyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(historyPanel, gridBagConstraints);
        historyPanel.setVisible(false);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void clearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAllActionPerformed
        result.setText("");
    }//GEN-LAST:event_clearAllActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        int endModifier = 1;
        if (result.getText().equals(""))
            return;
        if (result.getText().matches(".*([\\+\\-\\*\\/\\<\\>\\=\\!]=|\\+\\+|\\-\\-|\\|\\||\\&\\&|\\!\\()$"))
            endModifier = 2;
        
        if (result.getText().matches(".*true$"))
            endModifier = 4;
        
        if (result.getText().matches(".*false"))
            endModifier = 5;
        

        result.setText(result.getText().substring(0, result.getText().length()-endModifier));
    }//GEN-LAST:event_deleteActionPerformed

    private String cleanEquation(String finalEquation) throws LogicalFormatException, InvalidEquationException{
        // remove trailing operators and spaces.
        finalEquation = finalEquation.replaceAll("(?!\\+\\+|\\-\\-)[^\\w\\)\\.]+$(?<!\\+\\+|\\-\\-)| ", "");

        // fix all parenthesis
        finalEquation = finalEquation.replaceAll("(?<=[\\w\\)])\\(", "*(");
        finalEquation = finalEquation.replaceAll("\\)(?=[\\w])", ")*");

        // add closing parenthesis
        while(!isBalanced(finalEquation)){
            finalEquation += ")";
        }
        
        return finalEquation;
    }
    
    private void equalsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_equalsActionPerformed
        String finalEquation = result.getText();
        String answer = "";

        if (finalEquation.isEmpty()){
            return;
        }
        System.out.println(finalEquation);

        try{   
            finalEquation = cleanEquation(finalEquation);

            lastEquation.setText(finalEquation);

            finalEquation = handleParenthesis(finalEquation);

            answer = evalEquation(finalEquation);

            result.setText(format.format(Double.valueOf(answer)));
            historyList.setText(lastEquation.getText() + " = " + format.format(Double.valueOf(answer)) + "\n" + historyList.getText());
        } catch(NumberFormatException e) { // if the result is true or false
            result.setText(answer);
            
            // If it is an assignment operator then dont add an answer
            if (answer.isEmpty())
                historyList.setText(lastEquation.getText() + "\n" + historyList.getText());
            else
                historyList.setText(lastEquation.getText() + " = " + answer + "\n" + historyList.getText());

        } catch (InvalidEquationException | ArithmeticException | LogicalFormatException | NoSuchVariableException | InequalityFormatException | InvalidNameException e){
            showErrorDialog(e.getMessage());
            result.setText("");
            lastEquation.setText(" ");
        }
    }//GEN-LAST:event_equalsActionPerformed

    private void buttonAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAction
        if (!(evt.getSource() instanceof javax.swing.JButton))
            return;
        
        javax.swing.JButton button = (javax.swing.JButton) evt.getSource();
        
        if (button.getText().matches("\\d") && result.getText().matches("(true|false)"))
            result.setText("");
        
        result.setText(result.getText() + button.getText());
        
        
    }//GEN-LAST:event_buttonAction

    private void negationAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_negationAction
        String[] numbers = result.getText().split("(?!^-)(?!(?<=[\\W])-)[^\\d\\.\\w\\s]");
        if (numbers.length == 0)
            return;
        String lastNum = numbers[numbers.length - 1];
        String newEquation = result.getText().replaceAll("(?<![\\w\\)\\ ])(\\(?\\-)?[\\w\\.]+\\)?(?=\\)*$)(?![\\w\\.]+)", "");
        if (lastNum.matches("\\(?-[\\w\\.]+\\)?$"))
            result.setText(newEquation.concat(lastNum.replaceAll("[\\(\\-\\)]", "")));
        else if (lastNum.matches("[\\w\\.]+$"))
            result.setText(newEquation.concat("(-").concat(lastNum).concat(")"));
    }//GEN-LAST:event_negationAction

    private void historyAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_historyAction
        historyPanel.setVisible(!historyPanel.isVisible());
        historyList.setVisible(true);
    }//GEN-LAST:event_historyAction

    /**
     * This fucntion will calculate the equation when ENTER is pressed
     */
    private void resultKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_resultKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            equalsActionPerformed(null);
        }
    }//GEN-LAST:event_resultKeyPressed

    /**
     * This shows an error message diaglog
     * 
     * @param e this is the error message
     */
    private void showErrorDialog(String e){
        JOptionPane.showMessageDialog(this, e, "Error Message", JOptionPane.ERROR_MESSAGE);
    }
    
    /**
     * This function will solve all equations in a parenthesis
     * 
     * @param finalEquation This is the equation with parameters
     * @return an equation with all equations in parenthesis solved
     * @throws Calc.LogicalFormatException
     * @throws Calc.InvalidEquationException
     * @throws Calc.ArithmeticException
     * @throws Calc.NoSuchVariableException
     * @throws Calc.InequalityFormatException
     * @throws Calc.InvalidNameException 
     */
    private String handleParenthesis(String finalEquation) throws LogicalFormatException, InvalidEquationException, ArithmeticException, NoSuchVariableException, InequalityFormatException, InvalidNameException{ 
        int startPos = -1, endPos = -1;
        for(int i = 0; i<finalEquation.length(); i++){
            if (startPos != -1 && endPos != -1)
                break;
            if (String.valueOf(finalEquation.charAt(i)).startsWith("("))
                startPos = i;
            else if (String.valueOf(finalEquation.charAt(i)).endsWith(")"))
                endPos = i;
        }
        
        if (!finalEquation.matches(".*\\(.+") || (startPos == -1 && endPos == -1)){
            return finalEquation;
        }
        
        String startParenthesis = "(";
        String focus = finalEquation.substring(startPos+1, endPos);
        String resultEquation;
        
        resultEquation = evalEquation(focus);
        
        if (startPos > 0 && finalEquation.charAt(startPos-1) == '!'){
            if (!resultEquation.matches("true|false"))
                throw new LogicalFormatException();
            startParenthesis = "!" + startParenthesis;
            resultEquation = String.valueOf(!Boolean.valueOf(resultEquation));
        }
        finalEquation = finalEquation.replace(startParenthesis.concat(focus).concat(")"), resultEquation);
        System.out.println(finalEquation);
        if (finalEquation.matches(".*\\(.*"))
            finalEquation = handleParenthesis(finalEquation);
        return  finalEquation;
    }
    
    /**
     * This will return the value of the variable
     * 
     * @param var this the variable name
     * @return the value of a variable if it exists else return the regular number
     * @throws Calc.ArithmeticException 
     */
    private String handleVariables(String var) throws ArithmeticException{
        int startPos = 0;
        int negate = 1;
        if (var.matches("^-.+$")){
            startPos = 1;
            negate = -1;
        }
        
        String varValue = variables.get(var.substring(startPos));
        try {
            if (varValue != null && varValue.matches("^(true|false)$") && negate == 1)
                return varValue;
            if (varValue != null)
                return String.valueOf(Double.parseDouble(varValue) * negate);
        } catch (NumberFormatException ex){
            throw new ArithmeticException();
        }
        return var;
    }
   
    /**
     * This will solve the equation given
     * 
     * @param finalEquation this is the equation
     * @return the answer to the equation
     * @throws Calc.InvalidEquationException
     * @throws Calc.ArithmeticException
     * @throws Calc.NoSuchVariableException
     * @throws Calc.LogicalFormatException
     * @throws Calc.InequalityFormatException
     * @throws Calc.InvalidNameException 
     */
    private String evalEquation(String finalEquation) throws InvalidEquationException, ArithmeticException, NoSuchVariableException, LogicalFormatException, InequalityFormatException, InvalidNameException{
        List<String> operatorList = new ArrayList<>(Arrays.asList(finalEquation.split("(?<![\\w\\) ])\\-?[\\w.]+")));
        List<String> numbersList = new ArrayList<>(Arrays.asList(finalEquation.split("(?!^-)(?!(?<=[\\W])-)[^\\.\\w\\s]")));
        
        operatorList.removeAll(Arrays.asList(""));
        numbersList.removeAll(Arrays.asList(""));

        numbersList.replaceAll(e -> e.replaceAll("\\.0*$", ""));
        
        if (numbersList.isEmpty())
            return "";
        
        
        //Handle operations 
        do{
            if (numbersList.size() == 1 && (operatorList.isEmpty() || !operatorList.get(0).matches("^(\\+\\+|\\-\\-)$")))
                break;
            // TODO: Improve this part. Make a fuction that returms a list of operation order
            int mulPos = operatorList.indexOf("*");
            int divPos = operatorList.indexOf("/");
            int addPos = operatorList.indexOf("+");
            int subPos = operatorList.indexOf("-");
            int modPos = operatorList.indexOf("%");
            int gtPos = operatorList.indexOf(">");
            int ltPos = operatorList.indexOf("<");
            int gePos = operatorList.indexOf(">=");
            int lePos = operatorList.indexOf("<=");
            int eqPos = operatorList.indexOf("==");
            int nePos = operatorList.indexOf("!=");
            int orPos = operatorList.indexOf("||");
            int btPos = operatorList.indexOf("^");
            int adPos = operatorList.indexOf("&&");
            int aaPos = operatorList.indexOf("++");
            int mmPos = operatorList.indexOf("--");
            
            int selPos = -1;
            boolean removeSecondTerm = true;
            Operators selOperator = null;

            if (divPos > -1 && (divPos < mulPos || mulPos == -1) && (divPos < modPos || modPos == -1)){
                selPos = divPos;
                selOperator = Operators.DIV;
                
            } else if (mulPos > -1 && (mulPos < divPos || divPos == -1) && (mulPos < modPos || modPos == -1)){
                selPos = mulPos;
                selOperator = Operators.MUL;
                
            } else if (modPos > -1 && (modPos < divPos || divPos == -1) && (modPos < mulPos || mulPos == -1)){
                selPos = modPos;
                selOperator = Operators.MOD;
                
            } else if (addPos > -1 && (addPos < subPos || subPos == -1)){
                selPos = addPos;
                selOperator = Operators.ADD;
                
            } else if (subPos > -1 && (subPos < addPos || addPos == -1)){
                selPos = subPos;
                selOperator = Operators.SUB;
                
            } else if (gtPos > -1){
                selPos = gtPos;
                selOperator = Operators.GT;

            } else if (ltPos > -1){
                selPos = ltPos;
                selOperator = Operators.LT;

            } else if (gePos > -1){
                selPos = gePos;
                selOperator = Operators.GE;

            } else if (lePos > -1){
                selPos = lePos;
                selOperator = Operators.LE;

            } else if (eqPos > -1){
                selPos = eqPos;
                selOperator = Operators.ET;

            } else if (nePos > -1){
                selPos = nePos;
                selOperator = Operators.NET;
                
            } else if (adPos > -1){
                selPos = adPos;
                selOperator = Operators.AND;

            } else if (btPos > -1){
                selPos = btPos;
                selOperator = Operators.BIT;

            } else if (orPos > -1){
                selPos = orPos;
                selOperator = Operators.OR;
                
            } else if (aaPos > -1){
                selPos = aaPos;
                selOperator = Operators.PPLUS;
                removeSecondTerm = false;

            } else if (mmPos > -1){
                selPos = mmPos;
                selOperator = Operators.MMINUS;
                removeSecondTerm = false;
                
            } else if (operatorList.get(0).equals("=")){
                selOperator = Operators.ASSIGN;

            } else if (operatorList.get(0).equals("+=")){
                selOperator = Operators.AADD;

            } else if (operatorList.get(0).equals("-=")){
                selOperator = Operators.ASUB;
                
            } else if (operatorList.get(0).equals("*=")){
                selOperator = Operators.AMUL;

            } else if (operatorList.get(0).equals("/=")){
                selOperator = Operators.ADIV;

            } else if (operatorList.get(0).equals("%=")){
                selOperator = Operators.AMOD;

            } else {
                throw  new InvalidEquationException();
            }
            
            
            if (selOperator.ordinal() > 13 && selPos == -1)
                selPos = 0;
            
            System.out.println(numbersList);
            System.out.println(operatorList);
            numbersList.set(selPos, calculateEquation(numbersList, selPos, selOperator));
            
            operatorList.remove(selPos);
            if (removeSecondTerm)
                numbersList.remove(selPos+1);
        }while(numbersList.size() > 1); 

        return handleVariables(numbersList.get(0));
    }
    
    /**
     * 
     * @param str the string to check if the parenthesis is balanced
     * @return true if it is balanced
     * @throws Calc.InvalidEquationException if there is a closing parenthesis
     *                                       without an opening parenthesis
     */
    private boolean isBalanced(String str) throws InvalidEquationException{
        int i = 0;
        for(char s: str.toCharArray()){
            if (s == '(')
                i++;
            else if (s == ')')
                i--;
        }
        if (i < 0)
            throw new InvalidEquationException();
        return i == 0;
    }
    
    
    /**
     * This states all the possible operations that could be used
     */
    private enum Operators {
        ADD,    // + Addition
        SUB,    // - Subtraction
        MUL,    // * Multiplication
        DIV,    // / Division
        MOD,    // % Modulus
        LT,     // < Less than
        GT,     // > Greater than
        LE,     // <= Less than or Equals to
        GE,     // >= Greater than or Equals to
        ET,     // == Equals to
        NET,    // != Not Equals to
        OR,     // || Logical OR
        AND,    // && Logical AND
        BIT,    // ^ Logical Bitwise
                // !( Not operator is handle on handle parenthesis
        ASSIGN, // = Assignment
        AADD,   // += Assign Add
        ASUB,   // += Assign Subtract
        AMUL,   // *= Assign Multiply
        ADIV,   // /= Assign Divided
        AMOD,   // %= Assign Modulus
        PPLUS,  // ++ add one to variable
        MMINUS, // -- minus one to variable
    };
    

    class NoSuchVariableException extends Exception{

        public NoSuchVariableException() {
            super("Variable does not Exists");
        }

    }
    
    class ArithmeticException extends Exception{

        public ArithmeticException() {
            super("Atemptted to do arithmetic operation on a non double");
        }
        
        public ArithmeticException(String e) {
            super(e);
        }

    }
    
    class LogicalFormatException extends Exception{

        public LogicalFormatException() {
            super("Atemptted to do logical operation on a non boolean");
        }

    }
    
    class InequalityFormatException extends Exception{

        public InequalityFormatException() {
            super("Atemptted to do inequality operation on a non digit");
        }

    }
    
    class InvalidEquationException extends Exception{

        public InvalidEquationException() {
            super("Invalid Equation");
        }

    }
    
    class InvalidNameException extends Exception{

        public InvalidNameException() {
            super("Bad variable name");
        }

    }
    
    /**
     * This function will solve the two numbers given based on the operation specified
     * 
     * @param numbersList
     * @param selPos
     * @param a
     * @return
     * @throws Calc.NoSuchVariableException
     * @throws Calc.ArithmeticException
     * @throws Calc.LogicalFormatException
     * @throws Calc.InequalityFormatException
     * @throws Calc.InvalidNameException 
     */
    private String calculateEquation(List<String> numbersList, int selPos, Operators a) 
            throws NoSuchVariableException, ArithmeticException, LogicalFormatException, InequalityFormatException, InvalidNameException{
        
        String num1 = numbersList.get(selPos);
        String num2 = "";

        if (!a.toString().matches("PPLUS|MMINUS"))
            num2 = numbersList.get(selPos+1);
        
        // If the second number is a variable; convert to its value; else return the usual value
        // If the usual value is a non Digit after the conversion; the variable does not exists
        num2 = handleVariables(num2);
        if (num2.matches("^(?!^(true|false)$)(?!^[^a-zA-Z_])\\w+$"))
            throw new NoSuchVariableException();
        //on assignment operator (=)
        if (a.ordinal() == 14){
            if (!num1.matches("^(?!^(true|false)$)(?!^[^a-zA-Z_])\\w+$"))
                throw new InvalidNameException();
        }
        
        //before assignment operator (=)
        if (a.ordinal() < 14){
            num1 = handleVariables(num1);
            
            if (num1.matches("^(?!^(true|false)$)\\D+$"))
                throw new NoSuchVariableException();
        }
        
        // On arithimetic operators (+, -, *, /, %)
        if (a.ordinal() < 5 && (num1.matches("^(true|false)$") || num2.matches("^(true|false)$")))
            throw new ArithmeticException();
        
        // On relational operators (>, <, >=, <=, ==, !=)
        if (a.ordinal() > 4 && a.ordinal() < 9 && (num1.matches("^(true|false)$") || num2.matches("^(true|false)$")))
            throw new InequalityFormatException();
        
        // On logical operators (||, &&, ^)
        if (a.ordinal() > 10 && a.ordinal() < 14 && (!num1.matches("^(true|false)$") || !num2.matches("^(true|false)$")))
            throw new LogicalFormatException();
        

        

        Double varNum = null;
        
        // after assignment operator (=)
        if (a.ordinal() > 14){
            try {
                varNum = Double.valueOf(variables.get(num1));
            } catch (NumberFormatException e) {
                throw new ArithmeticException();
            } catch (NullPointerException e) {
                throw new NoSuchVariableException();
            }
        }
        
        switch (a) {
            case MUL:
                return String.valueOf(Double.valueOf(num1) * Double.valueOf(num2));
            case DIV:
                if (num2.equals("0")) throw new ArithmeticException("Attempted to divide by zero");
                return String.valueOf(Double.valueOf(num1) / Double.valueOf(num2));
            case ADD:
                return String.valueOf(Double.valueOf(num1) + Double.valueOf(num2));
            case SUB:
                return String.valueOf(Double.valueOf(num1) - Double.valueOf(num2));
            case MOD:
                if (num2.equals("0")) throw new ArithmeticException("Attempted to divide by zero");
                return String.valueOf(Double.valueOf(num1) % Double.valueOf(num2));
            case LT:
                return String.valueOf(Double.valueOf(num1) < Double.valueOf(num2));
            case GT:
                return String.valueOf(Double.valueOf(num1) > Double.valueOf(num2));
            case LE:
                return String.valueOf(Double.valueOf(num1) <= Double.valueOf(num2));
            case GE:
                return String.valueOf(Double.valueOf(num1) >= Double.valueOf(num2));
            case ET:
                return String.valueOf(num1.equals(num2));
            case NET:
                return String.valueOf(!num1.equals(num2));
            case OR:
                return String.valueOf(Boolean.valueOf(num1) || Boolean.valueOf(num2));
            case AND:
                return String.valueOf(Boolean.valueOf(num1) && Boolean.valueOf(num2));
            case BIT:
                return String.valueOf(Boolean.valueOf(num1) ^ Boolean.valueOf(num2));
            case ASSIGN:
                variables.put(num1, num2);
                break;
            case AADD:
                variables.put(num1, format.format(varNum + Double.valueOf(num2)));
                break;
            case ASUB:
                variables.put(num1, format.format(varNum - Double.valueOf(num2)));
                break;
            case AMUL:
                variables.put(num1, format.format(varNum * Double.valueOf(num2)));
                break;
            case ADIV:
                variables.put(num1, format.format(varNum / Double.valueOf(num2)));
                break;
            case AMOD:
                variables.put(num1, format.format(varNum % Double.valueOf(num2)));
                break;
            case PPLUS:
                return format.format(varNum + 1);
            case MMINUS:
                return format.format(varNum - 1);
            default:
                throw new AssertionError();
        }

        return "";
    }
    

   
    /**
     * @param args the command line arguments
     */

    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Calc calcc = new Calc();
                calcc.setVisible(true);
                calcc.result.requestFocusInWindow();
            }
        });
    }
    
    
    private final HashMap<String, String> variables = new HashMap<>();
    private final DecimalFormat format = new DecimalFormat("0.#############");

    
    private final java.awt.Color numColor = new java.awt.Color(57, 72, 103);
    private final java.awt.Color operatorColor = new java.awt.Color(33, 42, 62);
    private final java.awt.Color equalColor = new java.awt.Color(230, 57, 70);
    private final java.awt.Color backgroundColor = new java.awt.Color(29, 53, 87);
    private final java.awt.Color clearColor = new java.awt.Color(69, 123, 157);
    private final java.awt.Color textColor =  new java.awt.Color(241, 246, 249);
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addAdd;
    private javax.swing.JButton and;
    private javax.swing.JButton assignAdd;
    private javax.swing.JButton assignDiv;
    private javax.swing.JButton assignMin;
    private javax.swing.JButton assignMod;
    private javax.swing.JButton assignMul;
    private javax.swing.JButton assignment;
    private javax.swing.JButton bitwise;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JPanel calcPanel;
    private javax.swing.JButton clearAll;
    private javax.swing.JButton closeParentesis;
    private javax.swing.JButton decimal;
    private javax.swing.JButton delete;
    private javax.swing.JButton divide;
    private javax.swing.JButton eight;
    private javax.swing.JButton equals;
    private javax.swing.JButton equalsComparison;
    private javax.swing.JButton five;
    private javax.swing.JButton four;
    private javax.swing.JButton greaterEquals;
    private javax.swing.JButton greaterThan;
    private javax.swing.JButton historyButton;
    private javax.swing.JTextArea historyList;
    private javax.swing.JPanel historyPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lastEquation;
    private javax.swing.JButton lessEquals;
    private javax.swing.JButton lessThan;
    private javax.swing.JButton minMin;
    private javax.swing.JButton minus;
    private javax.swing.JButton multiply;
    private javax.swing.JButton negation;
    private javax.swing.JButton nine;
    private javax.swing.JButton not;
    private javax.swing.JButton notEquals;
    private javax.swing.JButton one;
    private javax.swing.JButton openParentesis;
    private javax.swing.JButton or;
    private javax.swing.JButton percent;
    private javax.swing.JButton plus;
    private javax.swing.JTextField result;
    private javax.swing.JPanel resultPanel;
    private javax.swing.JButton seven;
    private javax.swing.JButton six;
    private javax.swing.JButton three;
    private javax.swing.JButton two;
    private javax.swing.JButton zero;
    // End of variables declaration//GEN-END:variables
}